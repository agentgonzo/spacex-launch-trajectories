{"version":3,"sources":["MissionSelector.js","assets/capsule.png","MissionData.js","Map.js","MissionGraph.js","MissionView.js","App.js","reportWebVitals.js","index.js"],"names":["missions","getMissionByKey","missionKey","filter","mission","key","MissionSelector","props","NavDropdown","title","onSelect","onChange","map","Item","eventKey","href","telemetry","data","initialData","met","altitude","velocity","acceleration","MissionData","Table","striped","border","hover","size","toFixed","downrange","location","toString","KSC","lat","lng","Capsule","Image","className","src","capsule","Map","style","height","width","options","maps","fullscreenControl","mapTypeId","MapTypeId","SATELLITE","mapTypeControlOptions","MapTypeControlStyle","HORIZONTAL_BAR","position","ControlPosition","TOP_LEFT","mapTypeIds","ROADMAP","HYBRID","bootstrapURLKeys","defaultCenter","defaultZoom","RenderNoShape","MissionGraph","useState","points","setPoints","length","push","pause","reset","start","type","dataKey","name","yAxisId","unit","stroke","orientation","line","fill","shape","layout","MissionGraph2","Button","onClick","MissionView","pointer","useRef","current","ptr","ts","alts","vels","Spline","at","useMissionData","missionData","previousMissionData","previousAcceleration","useAcceleration","previousDownrange","previousVelocity","previousAltitude","altChange","displacement","Math","sqrt","pow","useDownrange","LatLon","destinationPoint","useLocation","split","allowResize","defaultSize","url","video","onPlay","onPause","SpacexNavBar","Navbar","bg","fixed","Collapse","id","Brand","Toggle","aria-controls","Nav","onMissionChange","App","initialMission","window","hash","replace","setMission","startTime","setStartTime","pauseTime","setPauseTime","running","setRunning","setMet","useEffect","interval","setInterval","Date","now","clearInterval","pauseDuration","useMissionTimer","launch","toLocaleString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3459ee2.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\nimport PropTypes from 'prop-types'\n\nconst missions = [\n    {\n        'key': 'dm1',\n        'title': \"Demo-1\",\n        'launch': '2019-03-02T07:49:03Z',\n        'video': 'https://www.youtube.com/watch?v=2ZL0tbOZYhE&feature=youtu.be&t=2931'\n    },\n    {\n        'key': 'dm2',\n        'title': \"Demo-2\",\n        'launch': '2020-05-30T19:22:45Z',\n        'video': 'https://www.youtube.com/watch?v=xY96v0OIcK4&feature=youtu.be&t=15756'\n    },\n    {\n        'key': 'crew-1',\n        'title': \" Crew-1\",\n        'launch': '2020-11-16T00:27:17Z',\n        'video': 'https://www.youtube.com/watch?v=E_FIaPBOJgc&feature=youtu.be&t=15150'\n    },\n]\n\nexport const getMissionByKey = (missionKey => missions.filter(mission => mission.key === missionKey)[0])\n\nexport const useMissionTimer = () => {\n    const [startTime, setStartTime] = useState(null)\n    const [pauseTime, setPauseTime] = useState(null)\n    const [running, setRunning] = useState(false)\n    const [met, setMet] = useState(0)\n\n    const start = () => {\n        if(startTime == null) {\n            setStartTime(Date.now())\n        }\n        if(pauseTime) {\n            // We've previously paused the timer, so we need to reset the start time to take account of the pause\n            const pauseDuration = Date.now() - pauseTime\n            setStartTime(startTime + pauseDuration)\n        }\n        setRunning(true)\n    }\n\n    const pause = () => {\n        setPauseTime(Date.now())\n        setRunning(false)\n    }\n\n    const reset = () => {\n        setStartTime(null)\n        setPauseTime(null)\n        setRunning(false)\n        setMet(0)\n    }\n\n    useEffect(() => {\n        if(running) {\n            const interval = setInterval(() => {\n                setMet(Date.now() - startTime)\n            }, 100);\n            return () => clearInterval(interval);\n        }\n    }, [running]);\n\n    return {\n        start,\n        pause,\n        reset,\n        met: (met - 10000) / 1000\n    }\n}\n\nconst MissionSelector = (props) => {\n    const selectMission = (missionKey) => {\n        props.onChange(getMissionByKey(missionKey))\n    }\n\n    return <NavDropdown title={props.mission.title} onSelect={selectMission}>\n        {missions.map(mission => <NavDropdown.Item\n                key={mission.key}\n                eventKey={mission.key}\n                href={`#${mission.key}`}>\n            {mission.title}\n        </NavDropdown.Item>)}\n    </NavDropdown>\n}\nMissionSelector.propTypes = {\n    mission: PropTypes.object,\n    onChange: PropTypes.func,\n}\n\nexport default MissionSelector;\n","export default __webpack_public_path__ + \"static/media/capsule.eb412449.png\";","import {Table} from \"react-bootstrap\";\nimport React, {useRef} from \"react\";\nimport PropTypes from 'prop-types'\nimport data from './assets/crew1.json'\nimport Spline from 'cubic-spline';\nimport LatLon from \"geodesy/latlon-ellipsoidal-vincenty.js\";\n\nconst telemetry = data.map( data => {\n    return data\n})\n\nconst initialData = {\n    met: 0,\n    altitude: 0,\n    velocity: 0,\n    acceleration: 0,\n}\n\nexport const useMissionData = (met) => {\n    const pointer = useRef(0)\n    if (met < 0) {\n        pointer.current = 0\n        initialData.met = met\n        return initialData\n    }\n\n    // Set the pointer be the frame at-or-before the current MET\n    while (met > telemetry[pointer.current].met) {\n        pointer.current++\n    }\n    const ptr = pointer.current\n\n    // We now use the datum at the pointer, and the two following points for the spline\n    const ts = [\n            data[ptr - 1].met,\n            data[ptr].met,\n            data[ptr + 1].met\n    ]\n    const alts = [\n            data[ptr - 1].altitude,\n            data[ptr].altitude,\n            data[ptr + 1].altitude,\n    ]\n    const vels = [\n            data[ptr - 1].velocity,\n            data[ptr].velocity,\n            data[ptr + 1].velocity,\n    ]\n\n    const velocity = new Spline(ts, vels).at(met)\n    const altitude = new Spline(ts, alts).at(met);\n    return {\n        met,\n        altitude,\n        velocity,\n    }\n}\n\nexport const useAcceleration = (missionData) => {\n    const previousMissionData = useRef(missionData)\n    const previousAcceleration = useRef(0)\n    const acceleration = (missionData.velocity - previousMissionData.current.velocity) / (missionData.met - previousMissionData.current.met)\n\n    if (missionData.met < 0) {\n        previousAcceleration.current = 0\n    }\n\n    if (missionData.met !== previousMissionData.current.met) {\n        previousMissionData.current = missionData\n        previousAcceleration.current = acceleration\n    }\n    // Convert from km/h/s into g\n    return previousAcceleration.current / 3.6 / 9.8\n}\n\nexport const useDownrange = (missionData) => {\n    const previousMissionData = useRef(missionData)\n    const previousDownrange = useRef(0)\n    const previousVelocity = useRef(0)\n    const previousAltitude = useRef(0)\n\n    const altChange = missionData.altitude - previousAltitude.current\n    // avgVel is in km/h - we want km/s\n    const avgVel = (missionData.velocity + previousVelocity.current) / 2 / 3600\n    const displacement = avgVel * (missionData.met - previousMissionData.current.met)\n\n    // Use pythagoras to get the downrange change\n    const downrange = Math.sqrt(Math.pow(displacement, 2) - Math.pow(altChange, 2) ) || 0\n\n    if(missionData.met < 0) {\n        previousDownrange.current = 0\n    }\n\n    if (missionData.met !== previousMissionData.current.met) {\n        previousMissionData.current = missionData\n        previousAltitude.current = missionData.altitude\n        previousVelocity.current = missionData.velocity\n        previousDownrange.current = previousDownrange.current + downrange\n    }\n\n    return previousDownrange.current\n}\n\nexport const useLocation = (downrange) => {\n    const KSC = {\n        lat: 28.6082,\n        lng: -80.60415\n    }\n    const ksc = new LatLon(KSC.lat, KSC.lng)\n\n    return ksc.destinationPoint(downrange * 1000, 51.6)\n}\n\nexport const MissionData = (props) => {\n    return <Table striped border hover size=\"sm\">\n        <tbody>\n            <tr>\n                <td>Mission Elapsed Time</td>\n                <td>{props.data.met.toFixed(1)}s</td>\n            </tr>\n            <tr>\n                <td>Altitude</td>\n                <td>{props.data.altitude.toFixed(2)}km</td>\n            </tr>\n            <tr>\n                <td>Velocity</td>\n                <td>{props.data.velocity.toFixed(0)}km/h</td>\n            </tr>\n            <tr>\n                <td>Acceleration</td>\n                <td>{props.data.acceleration.toFixed(1)}g</td>\n            </tr>\n            <tr>\n                <td>Downrange</td>\n                <td>{props.data.downrange.toFixed(1)}km</td>\n            </tr>\n            <tr>\n                <td>Location</td>\n                <td>{props.data.location.toString('dms', 0)}</td>\n            </tr>\n        </tbody>\n    </Table>\n}\nMissionData.propTypes = {\n    data: PropTypes.object\n}","import React from 'react';\nimport GoogleMapReact from 'google-map-react'\nimport Image from \"react-bootstrap/Image\";\nimport capsule from \"./assets/capsule.png\"\nimport PropTypes from 'prop-types'\nimport {useDownrange, useMissionData} from \"./MissionData\";\nimport LatLon from \"geodesy/latlon-ellipsoidal-vincenty\";\n\n\nconst KSC = {\n    lat: 28.6082,\n    lng: -80.60415\n};\n\nconst Capsule = () => <Image className=\"Capsule\" src={capsule}/>;\n\nexport const Map = (props) => {\n    const getMapOptions = (maps) => {\n        return  {\n            fullscreenControl: false,\n            mapTypeId: maps.MapTypeId.SATELLITE,\n            mapTypeControlOptions: {\n                style: maps.MapTypeControlStyle.HORIZONTAL_BAR,\n                position: maps.ControlPosition.TOP_LEFT,\n                mapTypeIds: [\n                    maps.MapTypeId.ROADMAP,\n                    maps.MapTypeId.SATELLITE,\n                    maps.MapTypeId.HYBRID\n                ]\n            },\n        }\n    }\n\n    return (\n            // Important! Always set the container height explicitly\n            <div style={{height: '100%', width: '100%'}}>\n                <GoogleMapReact\n                        options={getMapOptions}\n                        bootstrapURLKeys={{key: \"AIzaSyCvcqPLVfUMZdwaXIJej3oZsRpQbTw_KFs\"}}\n                        defaultCenter={KSC}\n                        defaultZoom={6}\n                >\n                    <Capsule lat={props.location.lat} lng={props.location.lng}/>\n                </GoogleMapReact>\n            </div>\n    );\n}\nMap.propTypes = {\n    location: PropTypes.object\n}","import PropTypes from \"prop-types\";\nimport React, {useState} from \"react\";\nimport {Button} from \"react-bootstrap\";\nimport ScatterChart from \"recharts/lib/chart/ScatterChart\";\n\nimport {CartesianGrid, Legend, Scatter, Tooltip, XAxis, YAxis, ZAxis} from \"recharts\";\n\nconst RenderNoShape = () => {\n    return null;\n}\n\nexport const MissionGraph = (props) => {\n    const [points, setPoints] = useState([])\n\n    if (props.data.met < 0 && points.length > 0) {\n        setPoints([]) // Hacky\n    } else if (props.data.met > points.length) { // Add a point to the graph every second\n        props.data.met = props.data.met\n        points.push(props.data)\n        setPoints(points)\n    }\n\n    return <div>\n        <MissionGraph2 pause={props.pause} reset={props.reset} start={props.start}/>\n        <ScatterChart width={600} height={300}>\n            <CartesianGrid/>\n            <XAxis type=\"number\" dataKey=\"met\" name=\"met\"/>\n            <YAxis yAxisId=\"velocity\" type=\"number\" dataKey=\"velocity\" name=\"velocity\" unit=\"km/h\" stroke=\"green\"/>\n            <YAxis yAxisId=\"altitude\" type=\"number\" dataKey=\"altitude\" name=\"altitude\" orientation=\"right\" unit=\"km\" stroke=\"blue\"/>\n            <YAxis yAxisId=\"acceleration\" type=\"number\" dataKey=\"acceleration\" name=\"acceleration\" orientation=\"right\" unit=\"g\" stroke=\"red\"/>\n            <Scatter yAxisId=\"velocity\" name=\"velocity\" data={points} line fill=\"green\" shape={<RenderNoShape/>}/>\n            <Scatter yAxisId=\"altitude\" name=\"altitude\" data={points} line fill=\"blue\" shape={<RenderNoShape/>}/>\n            <Scatter yAxisId=\"acceleration\" name=\"acceleration\" data={points} line fill=\"red\" shape={<RenderNoShape/>}/>\n            <Legend layout=\"vertical\"/>\n        </ScatterChart>\n    </div>\n}\nMissionGraph.propTypes = {\n    data: PropTypes.object,\n    start: PropTypes.func,\n    pause: PropTypes.func,\n    reset: PropTypes.func,\n}\n\nexport const MissionGraph2 = (props) => {\n    return <div>\n        <Button onClick={props.start}>Start</Button>\n        <Button onClick={props.pause}>Pause</Button>\n        <Button onClick={props.reset}>Reset</Button>\n    </div>\n}\nMissionGraph2.propTypes = {\n    start: PropTypes.func,\n    pause: PropTypes.func,\n    reset: PropTypes.func,\n    met: PropTypes.number,\n}","import SplitPane from \"react-split-pane\";\nimport {Map} from \"./Map\";\nimport ReactPlayer from \"react-player\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {MissionData, useAcceleration, useDownrange, useLocation, useMissionData} from \"./MissionData\";\nimport {MissionGraph} from \"./MissionGraph\";\n\nexport const MissionView = (props) => {\n    const data = useMissionData(props.met)\n    data.acceleration = useAcceleration(data)\n    data.downrange = useDownrange(data)\n    data.location = useLocation(data.downrange)\n\n    return <SplitPane className=\"Steve\" split=\"vertical\" allowResize={true} defaultSize=\"50%\">\n        <SplitPane split=\"horizonal\" allowResize={true} defaultSize=\"50%\">\n            <MissionData data={data} />\n            <MissionGraph start={props.start} pause={props.pause} reset={props.reset} data={data}/>\n        </SplitPane>\n        <SplitPane allowResize={true} defaultSize=\"50%\" split=\"horizontal\">\n            <Map location={data.location}/>\n            <ReactPlayer\n                    url={props.mission.video}\n                    width=\"100%\" height=\"100%\"\n                    onPlay={props.start}\n                    onPause={props.pause}\n            />\n        </SplitPane>\n    </SplitPane>\n}\nMissionView.propTypes = {\n    mission: PropTypes.object,\n    start: PropTypes.func,\n    pause: PropTypes.func,\n    reset: PropTypes.func,\n    met: PropTypes.number,\n}","import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport React, {useState} from 'react';\nimport './App.css';\nimport MissionSelector, {getMissionByKey, useMissionTimer} from './MissionSelector';\nimport {Nav, Navbar, Table} from \"react-bootstrap\";\nimport PropTypes from 'prop-types'\n\nimport {MissionView} from \"./MissionView\";\n\nconst SpacexNavBar = (props) => {\n    return <Navbar bg='light' fixed=\"top\">\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Navbar.Brand href=\"/\">SpaceX Launch Trajectories</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n            <Nav className=\"mr-auto\">\n                <Nav.Item>{props.title}</Nav.Item>\n            </Nav>\n            <MissionSelector mission={props.mission} onChange={props.onMissionChange}/>\n        </Navbar.Collapse>\n    </Navbar>\n}\nSpacexNavBar.propTypes = {\n    title: PropTypes.string,\n    mission: PropTypes.object,\n    onMissionChange: PropTypes.func,\n}\n\nfunction App() {\n    const initialMission = window.location.hash.replace(\"#\", \"\")\n    const [mission, setMission] = useState(getMissionByKey(initialMission) || getMissionByKey('crew-1'))\n    const {met, pause, reset, start} = useMissionTimer()\n    const launch = new Date(mission.launch).toLocaleString()\n\n    const onMissionChange = (missionKey) => {\n        setMission(missionKey)\n        reset()\n    }\n\n    return <div className=\"App\">\n        <SpacexNavBar title={`${mission.title}, launched ${launch}`} mission={mission} onMissionChange={onMissionChange}/>\n        <MissionView mission={mission} met={met} start={start} pause={pause} reset={reset}/>\n    </div>\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}